**To-Do-suunnitelma: Dokumentaation automatisointi Docusauruksella ja CI/CD:llä**

1.  **Valmistelut ja Projektin Alustus**
    *   [ ] Varmista Python-projektin valmiusaste dokumentointia varten.
    *   [ ] Luo projektin juureen `docs/`-kansio dokumentaatiotiedostoille.
    *   [ ] Kirjoita ensimmäiset Markdown (.md) -dokumentit (esim. `index.md`, `installation.md`, `api_reference.md`).
        *   [ ] Harkitse API-dokumentaation (esim. `api_reference.md`) automaattista generointia työkaluilla kuten `pdoc` tai `Sphinx` ja sen muuntamista Markdown-muotoon.

2.  **Docusauruksen Käyttöönotto**
    *   [ ] Asenna Docusaurus: `npx create-docusaurus@latest docs-site classic` (tai valitsemasi nimi `docs-site`:n tilalle).
    *   [ ] Siirry Docusaurus-projektin kansioon: `cd docs-site`.
    *   [ ] Korvaa Docusauruksen oletusdokumentit omilla Markdown-tiedostoillasi (`docs/`-kansiosta).
    *   [ ] Konfiguroi Docusaurus (`docusaurus.config.js`):
        *   [ ] Määritä sivuston nimi (`title`), tagline, organisaation/käyttäjän nimi (`organizationName`), projektin nimi (`projectName`).
        *   [ ] **TÄRKEÄÄ GitHub Pagesia varten:** Aseta `baseUrl` vastaamaan projektin nimeä, jos julkaiset projektisivuna (esim. `/projektin-nimi/`). Jos käytät custom domainia tai juurta, tämä voi olla `/`.
        *   [ ] Määritä `url` (esim. `https://kayttajanimi.github.io`).
    *   [ ] Muokkaa sivupalkin navigaatiota (`sidebars.js` tai vastaava) vastaamaan dokumentaatiosi rakennetta.
    *   [ ] Testaa Docusaurus-sivustoa paikallisesti: `npm run start`.

3.  **Integrointi Python-projektiin ja Versionhallinta**
    *   [ ] Päätä, sijoitetaanko Docusaurus-projekti (`docs-site/`) Python-projektin alikansioon vai pidetäänkö se erillisenä (yleensä alikansio on kätevämpi).
    *   [ ] Lisää kaikki projektitiedostot (Python-koodi, Docusaurus-sivusto) Git-versionhallintaan.
    *   [ ] Tee commit: `git add .` ja `git commit -m "Lisätty Docusaurus-dokumentaatiosivusto"`.
    *   [ ] Työnnä muutokset GitHub-repositorioosi.

4.  **CI/CD-putken Määrittely (GitHub Actions)**
    *   [ ] Luo `.github/workflows/`-kansio projektisi juureen (ellei sitä jo ole).
    *   [ ] Luo uusi YAML-tiedosto workflow'lle, esim. `deploy-docs.yml`.
    *   [ ] Määrittele workflow:
        *   [ ] Triggeröinti: `on: push: branches: [ main ]` (tai mikä päähaarasi onkaan).
        *   [ ] Työ (`job`), esim. `build-and-deploy`:
            *   [ ] `runs-on: ubuntu-latest`.
            *   [ ] `actions/checkout@v3` (tai uudempi) koodin noutamiseksi.
            *   [ ] `actions/setup-node@v3` (tai uudempi) Node.js:n asentamiseksi (määritä sopiva Node-versio, esim. `18`).
            *   [ ] Asenna Docusaurus-riippuvuudet: `cd docs-site && npm install`.
            *   [ ] Rakenna Docusaurus-sivusto: `cd docs-site && npm run build`.
            *   [ ] Julkaise GitHub Pagesiin käyttäen `peaceiris/actions-gh-pages@v3` (tai vastaavaa actionia):
                *   [ ] Anna `github_token: ${{ secrets.GITHUB_TOKEN }}`.
                *   [ ] Määritä `publish_dir: ./docs-site/build` (tai Docusauruksen build-kansion polku).
                *   [ ] (Valinnainen) Jos julkaiset tiettyyn haaraan (esim. `gh-pages`), määritä se.

5.  **GitHub Pages -julkaisun Varmistaminen**
    *   [ ] Varmista, että GitHub-repositoriosi asetuksissa Pages on konfiguroitu käyttämään oikeaa haaraa (yleensä `gh-pages` tai `main`-haaran `/docs`-kansio, riippuen workflow'sta). Docusaurus CI/CD yleensä hoitaa tämän `gh-pages`-haaran kautta.
    *   [ ] Huomioi olemassa oleva portfoliosivusi (`https://kayttajanimi.github.io/`). Projektidokumentaatio tulee olemaan osoitteessa `https://kayttajanimi.github.io/projektin-nimi/`. Varmista, että `docusaurus.config.js`-tiedoston `baseUrl` on oikein (`/projektin-nimi/`).

6.  **Testaus ja Käyttöönotto**
    *   [ ] Tee push `main`-haaraan käynnistääksesi GitHub Actions workflow'n.
    *   [ ] Seuraa workflow'n suoritusta GitHubin "Actions"-välilehdeltä.
    *   [ ] Kun workflow on onnistuneesti suoritettu, tarkista julkaistu dokumentaatiosivusto verkossa.
    *   [ ] Varmista, että kaikki linkit toimivat ja sivusto näyttää odotetulta.

7.  **Ylläpito ja Kehitys**
    *   [ ] Jatkossa aina kun päivität dokumentaatiota (`.md`-tiedostoja) tai koodia (jos se vaikuttaa dokumentaatioon), tee commit ja push. CI/CD-putki hoitaa päivityksen automaattisesti.
    *   [ ] Harkitse lisäominaisuuksia Docusaurukseen, kuten hakutoiminto (esim. Algolia), versiointi, tai kustomoidut teemat.

8.  **Kehitysideat ja Parannusehdotukset (Vaikuttavuuden mukaan järjestettynä)**

    **Korkea Vaikutus / Suhteellisen Matala Vaiva:**
    *   [ ] **Automatisoi API-dokumentaation generointi CI/CD-putkessa:**
        *   Varmistaa, että API-dokumentaatio on aina ajan tasalla koodin kanssa.
        *   Esim. `pdoc` tai `Sphinx` ajetaan osana GitHub Actions workflow'ta ennen Docusauruksen buildia.
    *   [ ] **Automatisoitu linkkien tarkistus CI/CD-putkessa:**
        *   Estää rikkinäiset linkit ja parantaa dokumentaation laatua.
        *   Esim. `lychee-action` GitHub Actionsille.
    *   [ ] **Docusaurus: Hyödynnä automaattista sivupalkin generointia:**
        *   Vähentää manuaalista `sidebars.js`-tiedoston ylläpitoa, jos kansiorakenne on looginen (`autogenerate` sidebars.js-tiedostossa).

    **Merkittävä Vaikutus / Keskitasoinen Vaiva:**
    *   [ ] **Docusaurus: Integroi Algolia DocSearch (tai vastaava) parempaa hakua varten:**
        *   Parantaa merkittävästi dokumentaation käytettävyyttä ja löydettävyyttä (ilmainen avoimen lähdekoodin projekteille).
    *   [ ] **Docusaurus: Ota käyttöön dokumentaation versiointi:**
        *   Erityisen tärkeää, jos projektista julkaistaan eri versioita (esim. kirjastot, työkalut).
        *   CI/CD voi auttaa uusien versioiden luomisessa ja julkaisussa.
    *   [ ] **Automatisoitu koodiesimerkkien testaus/validointi CI/CD-putkessa:**
        *   Varmistaa, että dokumentaation koodiesimerkit toimivat ja ovat ajan tasalla.

    **Korkea Vaikutus / Suurempi Vaiva tai Erityistarpeet:**
    *   [ ] **Docusaurus: Hyödynnä MDX:ää interaktiivisten komponenttien luomiseen:**
        *   Mahdollistaa dynaamisemman ja osallistavamman dokumentaation (esim. interaktiiviset demot, koodieditorit).
    *   [ ] **Docusaurus: Edistynyt teeman kustomointi ja brändäys:**
        *   Luo uniikin ja projektin brändiin sopivan ulkoasun.
    *   [ ] **Integroi sivustoanalytiikka (esim. Google Analytics, Plausible):**
        *   Auttaa ymmärtämään, miten dokumentaatiota käytetään ja missä on parannettavaa.
    *   [ ] **Panosta saavutettavuuteen (Accessibility):**
        *   Varmista, että dokumentaatio on käytettävissä kaikille käyttäjille noudattamalla saavutettavuusperiaatteita.
